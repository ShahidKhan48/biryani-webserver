pipeline {
    agent any
    
    environment {
        DOCKER_CREDENTIALS = credentials('dockerhub')  // Docker Hub credentials stored in Jenkins
        KUBECONFIG = credentials('kubeconfig')  // Kubernetes credentials stored in Jenkins
        IMAGE_NAME = 'shahidkhan777/biryani-webserver'  // Docker Hub repository
    }

    stages {

        stage('Clone Repository') {
            steps {
                echo 'Cloning repository from GitHub...'
                git branch: 'main', url: 'https://github.com/ShahidKhan48/biryani-webserver.git', credentialsId: 'github-credentials'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    dockerImage = docker.build("${env.IMAGE_NAME}:latest")  // Build Docker image with the 'latest' tag
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    docker.withRegistry('https://registry.hub.docker.com', DOCKER_CREDENTIALS) {
                        dockerImage.push('latest')  // Push the Docker image with 'latest' tag
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying to Kubernetes...'
                    // Use the Kubernetes credentials (kubeconfig) stored in Jenkins
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        // Use kubectl to deploy or update the app in Kubernetes
                        sh '''
                        export KUBECONFIG=$KUBECONFIG
                        kubectl apply -f deployment.yaml  // Apply the Kubernetes deployment from YAML
                        kubectl set image deployment/biryani-webserver biryani-webserver=${IMAGE_NAME}:latest  // Update image in Kubernetes deployment
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean the workspace after the build is done
        }
    }
}

